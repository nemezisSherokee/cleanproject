spring:
  application:
    name: ${SPRING_APPLICATION_NAME}
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID}

  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: ${DATASOURCE_DRIVER_CLASS_NAME}
  cache:
    type: ${CACHE_TYPE}
  jpa:
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL_AUTO}
    show-sql: ${JPA_SHOW_SQL}
    generate-ddl: ${JPA_GENERATE_DDL}
    properties:
      hibernate:
        dialect: ${JPA_HIBERNATE_DIALECT}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      connect-timeout: ${REDIS_CONNECT_TIMEOUT}
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      base-path: ${MANAGEMENT_ENDPOINTS_WEB_BASE_PATH}
      path-mapping:
        prometheus: ${MANAGEMENT_ENDPOINTS_WEB_PATH_MAPPING_PROMETHEUS}
  metrics:
    tags:
      application: ${MANAGEMENT_METRICS_TAGS_APPLICATION}
  endpoint:
    health:
      enabled: ${MANAGEMENT_ENDPOINT_HEALTH_ENABLED}
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS}
  prometheus:
    metrics:
      export:
        enabled: ${MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED}

server:
  port: ${SERVER_PORT}

eureka:
  instance:
    prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS}
  client:
    fetch-registry: ${EUREKA_CLIENT_FETCH_REGISTRY}
    register-with-eureka: ${EUREKA_CLIENT_REGISTER_WITH_EUREKA}
    service-url:
      defaultZone: ${EUREKA_SERVER_ADDRESS}

logging:
  file:
    name: ${LOGGING_FILE_NAME}

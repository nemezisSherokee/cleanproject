services:
  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - app-network

  postgresql:
    container_name: postgres-container
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - ~/apps/postgreslearning:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgreslearning
      POSTGRES_PASSWORD: postgreslearning
      POSTGRES_DB: postgreslearning
    networks:
      - app-network

  redis:
    container_name: redis-container
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ~/apps/redis/data:/root/redis
      - ~/apps/redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: redis
    networks:
      - app-network

  prometheus:
    container_name: prometheus-container
    image: prom/prometheus
    volumes:
      - ./cfg/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    container_name: grafana-container
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - ./cfg/grafana/grafana.env
    networks:
      - app-network

  eurekaserver:
    container_name: eurekaserver-container
    image: eurekaserver
    build:
      context: ./eurekaserver
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8761:8080"
    networks:
      - app-network

  productcatalog:
    container_name: productcatalog-container
    image: nemezis/productcatalog:latest
    build:
      context: ./productcatalog
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "9081:8080"
    networks:
      - app-network
    environment:
      CHECK_POSTGRES: true
      CHECK_KAFKA: true
      CHECK_RABBITMQ: true
      CHECK_REDIS: true
      CHECK_EUREKA_SERVER: true
      CHECK_REDIS_HOST: 'redis'
      KAFKA_PORT:  29092
      RABBIT_PORT:  5672
      REDIS_PORT:  6379
      POSTGRES_PORT:  5432
      EUREKA_PORT:  8080
      EUREKA_CLIENT_FETCH_REGISTRY: 'true'
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: 'true'

  orderprocessing:
    container_name: orderprocessing-container
    image: nemezis/orderprocessing:latest
    build:
      context: ./orderprocessing
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "9082:8080"
    networks:
      - app-network
    environment:
      CHECK_POSTGRES: true
      CHECK_KAFKA: true
      CHECK_RABBITMQ: true
      CHECK_REDIS: true
      CHECK_EUREKA_SERVER: false
      CHECK_REDIS_HOST: 'redis'
      KAFKA_PORT:  29092
      RABBIT_PORT:  5672
      REDIS_PORT:  6379
      POSTGRES_PORT:  5432
      EUREKA_PORT:  8080
      EUREKA_CLIENT_FETCH_REGISTRY: 'false'
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: 'false'

  apigateway:
    container_name: apigateway-container
    image: nemezis/apigateway:latest
    build:
      context: ./apigateway
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "9001:8080"
    networks:
      - app-network
    environment:
      CHECK_POSTGRES: true
      CHECK_KAFKA: true
      CHECK_RABBITMQ: true
      CHECK_REDIS: true
      CHECK_EUREKA_SERVER: true
      CHECK_REDIS_HOST: 'redis'
      KAFKA_PORT:  29092
      RABBIT_PORT:  5672
      REDIS_PORT:  6379
      POSTGRES_PORT:  5432
      EUREKA_PORT:  8080
      EUREKA_CLIENT_FETCH_REGISTRY: 'false'
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: 'false'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper-container
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - app-network
    volumes:
      - ./.zk-data:/var/lib/zookeeper/data
      - ./.zk-txn-logs:/var/var/lib/zookeeper/log

  kafka:
    networks:
      - app-network
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka-container
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    volumes:
      - ./.kafka/data:/var/lib/kafka/data


networks:
  app-network:
    driver: bridge


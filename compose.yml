services:
  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  zookeeper:
    container_name: zookeeper-container
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-network

  kafka:
    container_name: kafka-container
    image: bitnami/kafka:latest
    user: root
    ports:
      - "9092:9092"
    environment:
#      KAFKA_BROKER_ID: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-container:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - ./.kafka:/bitnami/kafka
    networks:
      - app-network
    depends_on:
      - zookeeper

  postgres:
    container_name: postgres-container
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - ~/apps/postgreslearning:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgreslearning
      POSTGRES_PASSWORD: postgreslearning
      POSTGRES_DB: postgreslearning

  redis:
    container_name: redis-container
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ~/apps/redis/data:/root/redis
      - ~/apps/redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: redis

  prometheus:
    container_name: prometheus-container
    image: prom/prometheus
    volumes:
      - ./cfg/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana-container
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - ./cfg/grafana/grafana.env

  elasticsearch:
    container_name: elasticsearch-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"

  logstash:
    container_name: logstash-container
    image: docker.elastic.co/logstash/logstash:7.17.13
    ports:
      - "5000:5000"
    volumes:
      - ./.apps/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./.apps/logstash:/usr/share/logstash/config
      - ./.apps/logstash/order-processing-service/logs:/usr/share/logstash/logs
      - ./.apps/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    command: ["-f", "/usr/share/logstash/config/logstash.conf"]
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    container_name: kibana-container
    image: docker.elastic.co/kibana/kibana:7.17.13
    ports:
      - "5601:5601"
    depends_on:
      - logstash
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
